name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options:
          - staging
          - production

env:
  DOTNET_VERSION: "9.0.x"
  DOCKER_IMAGE_NAME: cleanarchitecture
  SOLUTION_PATH: "CleanArchitecture.sln"

jobs:
  # Job 1: Build and Push Docker Image
  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_CONFIGURATION=Release

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  # Job 2: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.yourapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging (Docker Compose)
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: SSH to staging server and run docker-compose

      - name: Run smoke tests on Staging
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke tests here
          # curl -f https://staging.yourapp.com/health || exit 1

      - name: Notify deployment success
        run: |
          echo "✅ Deployment to staging successful" >> $GITHUB_STEP_SUMMARY
          echo "Environment: staging" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ needs.docker-build-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY

  # Job 3: Deploy to Production (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build-push, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://yourapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment backup
        run: |
          echo "Creating backup before production deployment..."
          # Add backup commands here

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: SSH to production server and run docker-compose with zero-downtime

      - name: Run smoke tests on Production
        run: |
          echo "Running smoke tests on production..."
          # Add smoke tests here
          # curl -f https://yourapp.com/health || exit 1

      - name: Verify deployment
        run: |
          echo "Verifying production deployment..."
          # Add verification steps

      - name: Notify deployment success
        run: |
          echo "🚀 Deployment to production successful" >> $GITHUB_STEP_SUMMARY
          echo "Environment: production" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ needs.docker-build-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY

  # Job 4: Create Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version tag
        id: version
        run: |
          VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: v$VERSION"

      - name: Get commit messages since last release
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" -n 10)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)")
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: Release v${{ steps.version.outputs.VERSION }}
          body: |
            ## 🚀 Release v${{ steps.version.outputs.VERSION }}

            ### Changes
            ${{ steps.changelog.outputs.CHANGELOG }}

            ### Docker Image
            ```
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}
            ```

            ### Deployment Info
            - **Environment**: Production
            - **Commit**: ${{ github.sha }}
            - **Deployed**: ${{ github.event.head_commit.timestamp }}
            - **Deployed by**: ${{ github.actor }}

            ### Test Results
            - ✅ Unit Tests: Passed
            - ✅ Integration Tests: Passed
            - ✅ E2E Tests: Passed
            - ✅ Architecture Tests: Passed
            - ✅ Security Scan: Passed
          draft: false
          prerelease: false

  # Job 5: Rollback (Manual Trigger Only)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'

    steps:
      - name: Rollback to previous version
        run: |
          echo "Rolling back deployment..."
          # Add rollback commands here

      - name: Notify rollback
        run: |
          echo "⚠️ Deployment rolled back" >> $GITHUB_STEP_SUMMARY
