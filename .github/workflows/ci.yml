name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    release:
        types: [published]

jobs:
    build-and-test:
        runs-on: windows-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: "9.0.x"

            - name: Setup NuGet
              uses: nuget/setup-nuget@v2

            - name: Get version
              id: version
              run: |
                  if ($env:GITHUB_EVENT_NAME -eq "release") {
                    # Para releases, usar la versiÃ³n del tag
                    $TAG = $env:GITHUB_REF -replace "refs/tags/", ""
                    $VERSION = $TAG -replace "^v", ""
                    echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
                    Write-Host "ðŸ“¦ Releasing version: $VERSION"
                  } else {
                    # Para push/PR, usar timestamp
                    $TIMESTAMP = Get-Date -Format "yyyyMMddHHmmss"
                    $VERSION = "1.0.0-dev.$TIMESTAMP"
                    echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
                    Write-Host "ðŸ“¦ Building development version: $VERSION"
                  }
              shell: pwsh

            - name: Build and Test
              run: |
                  .\scripts\Build.ps1 -Version ${{ steps.version.outputs.version }}
              shell: pwsh

            - name: Upload package artifact
              if: github.event_name != 'release'
              uses: actions/upload-artifact@v4
              with:
                  name: nuget-package-dev-${{ steps.version.outputs.version }}
                  path: packages/nuget/output/*.nupkg
                  retention-days: 7

            - name: Publish to NuGet
              if: github.event_name == 'release'
              run: |
                  .\scripts\Push.ps1 -Version ${{ steps.version.outputs.version }} -NuGetApiKey ${{ secrets.NUGET_API_KEY }}
              shell: pwsh
